/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.lexer;

import java.io.*;
import lexing.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.DEF;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.COMMENT; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMENT; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMENT; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.DEF; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBeginComment(line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInComment(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStar(line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndComment(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBegin(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOmega(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInt(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolean(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDeclare(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPrint(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAnd(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOr(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNot(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIf(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFi(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhile(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWend(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPlus(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMinus(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMultiply(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDivide(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLessthan(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGreaterthan(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLparen(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRparen(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTrue(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFalse(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIncrement(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDecrement(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAssign(line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSpace(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // DEF
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 39, 1}, {40, 40, 6}, {41, 41, 7}, {42, 46, 1}, {47, 47, 8}, {48, 57, 9}, {58, 64, 1}, {65, 90, 10}, {91, 96, 1}, {97, 97, 11}, {98, 98, 12}, {99, 99, 13}, {100, 100, 14}, {101, 101, 15}, {102, 102, 16}, {103, 107, 10}, {108, 108, 17}, {109, 109, 10}, {110, 110, 18}, {111, 111, 19}, {112, 112, 20}, {113, 113, 10}, {114, 114, 21}, {115, 115, 22}, {116, 116, 23}, {117, 117, 24}, {118, 122, 10}, {123, 65535, 1}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{42, 42, 25}, },
            {{46, 46, 26}, {48, 57, 27}, },
            {{48, 57, 28}, {65, 90, 29}, {97, 122, 29}, },
            {{48, 90, -12}, {97, 97, 29}, {98, 98, 30}, {99, 107, 29}, {108, 108, 31}, {109, 109, 29}, {110, 110, 32}, {111, 120, 29}, {121, 121, 33}, {122, 122, 29}, },
            {{48, 90, -12}, {97, 116, 29}, {117, 117, 34}, {118, 122, 29}, },
            {{48, 90, -12}, {97, 110, 29}, {111, 111, 35}, {112, 122, 29}, },
            {{48, 90, -12}, {97, 97, 36}, {98, 100, 29}, {101, 101, 37}, {102, 104, 29}, {105, 105, 38}, {106, 113, 29}, {114, 114, 39}, {115, 122, 29}, },
            {{48, 90, -12}, {97, 109, 29}, {110, 110, 40}, {111, 122, 29}, },
            {{48, 116, -14}, {117, 117, 41}, {118, 122, 29}, },
            {{48, 90, -12}, {97, 100, 29}, {101, 101, 42}, {102, 110, 29}, {111, 111, 43}, {112, 122, 29}, },
            {{48, 90, -12}, {97, 97, 44}, {98, 100, 29}, {101, 101, 45}, {102, 122, 29}, },
            {{48, 90, -12}, {97, 108, 29}, {109, 109, 46}, {110, 122, 29}, },
            {{48, 100, -19}, {101, 101, 47}, {102, 122, 29}, },
            {{48, 110, -15}, {111, 111, 48}, {112, 122, 29}, },
            {{48, 100, -19}, {101, 101, 49}, {102, 122, 29}, },
            {{48, 110, -15}, {111, 111, 50}, {112, 122, 29}, },
            {{48, 109, -17}, {110, 110, 51}, {111, 122, 29}, },
            {},
            {{48, 57, 52}, },
            {{46, 57, -11}, },
            {{48, 122, -12}, },
            {{48, 122, -12}, },
            {{48, 90, -12}, {97, 97, 53}, {98, 122, 29}, },
            {{48, 90, -12}, {97, 111, 29}, {112, 112, 54}, {113, 122, 29}, },
            {{48, 109, -17}, {110, 110, 55}, {111, 122, 29}, },
            {{48, 100, -19}, {101, 101, 56}, {102, 122, 29}, },
            {{48, 90, -12}, {97, 101, 29}, {102, 102, 57}, {103, 122, 29}, },
            {{48, 109, -17}, {110, 110, 58}, {111, 122, 29}, },
            {{48, 90, -12}, {97, 103, 29}, {104, 104, 59}, {105, 122, 29}, },
            {{48, 90, -12}, {97, 98, 29}, {99, 99, 60}, {100, 122, 29}, },
            {{48, 98, -39}, {99, 99, 61}, {100, 122, 29}, },
            {{48, 110, -15}, {111, 111, 62}, {112, 122, 29}, },
            {{48, 90, -12}, {97, 99, 29}, {100, 100, 63}, {101, 122, 29}, },
            {{48, 90, -12}, {97, 114, 29}, {115, 115, 64}, {116, 122, 29}, },
            {{48, 90, -12}, {97, 117, 29}, {118, 118, 65}, {119, 122, 29}, },
            {{48, 110, -15}, {111, 111, 66}, {112, 113, 29}, {114, 114, 67}, {115, 122, 29}, },
            {{48, 90, -12}, {97, 120, 29}, {121, 121, 68}, {122, 122, 29}, },
            {{48, 90, -12}, {97, 113, 29}, {114, 114, 69}, {115, 122, 29}, },
            {{48, 100, -19}, {101, 101, 70}, {102, 122, 29}, },
            {{48, 100, -19}, {101, 101, 71}, {102, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 113, -47}, {114, 114, 72}, {115, 122, 29}, },
            {{48, 108, -21}, {109, 109, 73}, {110, 122, 29}, },
            {{48, 99, -42}, {100, 100, 74}, {101, 122, 29}, },
            {{48, 57, 52}, },
            {{48, 98, -39}, {99, 99, 75}, {100, 122, 29}, },
            {{48, 103, -38}, {104, 104, 76}, {105, 122, 29}, },
            {{48, 110, -15}, {111, 111, 77}, {112, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 101, -36}, {102, 102, 78}, {103, 122, 29}, },
            {{48, 114, -43}, {115, 115, 79}, {116, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 90, -12}, {97, 107, 29}, {108, 108, 80}, {109, 122, 29}, },
            {{48, 103, -38}, {104, 104, 81}, {105, 122, 29}, },
            {{48, 111, -33}, {112, 112, 82}, {113, 122, 29}, },
            {{48, 90, -12}, {95, 95, 83}, {97, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 100, -19}, {101, 101, 84}, {102, 122, 29}, },
            {{48, 90, -12}, {97, 115, 29}, {116, 116, 85}, {117, 122, 29}, },
            {{48, 99, -42}, {100, 100, 86}, {101, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 101, -36}, {102, 102, 87}, {103, 122, 29}, },
            {{48, 90, -12}, {97, 102, 29}, {103, 103, 88}, {104, 122, 29}, },
            {{48, 113, -47}, {114, 114, 89}, {115, 122, 29}, },
            {{48, 101, -36}, {102, 102, 90}, {103, 122, 29}, },
            {{48, 100, -19}, {101, 101, 91}, {102, 122, 29}, },
            {{48, 100, -19}, {101, 101, 92}, {102, 122, 29}, },
            {{48, 116, -14}, {117, 117, 93}, {118, 122, 29}, },
            {{48, 90, -12}, {97, 97, 94}, {98, 122, 29}, },
            {{48, 116, -14}, {117, 117, 95}, {118, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 90, -12}, {97, 104, 29}, {105, 105, 96}, {106, 122, 29}, },
            {{48, 90, -12}, {97, 97, 97}, {98, 122, 29}, },
            {{48, 110, -15}, {111, 111, 98}, {112, 122, 29}, },
            {{48, 122, -12}, },
            {{99, 99, 99}, },
            {{48, 107, -62}, {108, 108, 100}, {109, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 57, 28}, {65, 83, 29}, {84, 84, 101}, {85, 90, 29}, {97, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 90, -12}, {97, 97, 102}, {98, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 83, -88}, {84, 84, 103}, {85, 122, -88}, },
            {{48, 122, -12}, },
            {{48, 113, -47}, {114, 114, 104}, {115, 122, 29}, },
            {{48, 114, -43}, {115, 115, 105}, {116, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 109, -17}, {110, 110, 106}, {111, 122, 29}, },
            {{48, 99, -42}, {100, 100, 107}, {101, 122, 29}, },
            {{48, 113, -47}, {114, 114, 108}, {115, 122, 29}, },
            {{48, 115, -68}, {116, 116, 109}, {117, 122, 29}, },
            {{111, 111, 110}, },
            {{48, 57, 28}, {65, 67, 29}, {68, 68, 111}, {69, 84, 29}, {85, 85, 112}, {86, 90, 29}, {97, 122, 29}, },
            {{48, 110, -15}, {111, 111, 113}, {112, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 110, -15}, {111, 111, 114}, {112, 122, 29}, },
            {{48, 90, -12}, {95, 95, 115}, {97, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 98, -39}, {99, 99, 116}, {100, 122, 29}, },
            {{48, 100, -19}, {101, 101, 117}, {102, 122, 29}, },
            {{48, 100, -19}, {101, 101, 118}, {102, 122, 29}, },
            {{48, 110, -15}, {111, 111, 119}, {112, 122, 29}, },
            {{110, 110, 120}, },
            {{48, 110, -15}, {111, 111, 121}, {112, 122, 29}, },
            {{48, 111, -33}, {112, 112, 122}, {113, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 122, -12}, },
            {{99, 99, 123}, },
            {{48, 100, -19}, {101, 101, 124}, {102, 122, 29}, },
            {{48, 113, -47}, {114, 114, 125}, {115, 122, 29}, },
            {{48, 122, -12}, },
            {{48, 108, -21}, {109, 109, 126}, {110, 122, 29}, },
            {{115, 115, 127}, {116, 116, 128}, },
            {{48, 90, -12}, {97, 118, 29}, {119, 119, 129}, {120, 122, 29}, },
            {{48, 122, -12}, },
            {{111, 111, 130}, },
            {{48, 122, -12}, },
            {{48, 122, -12}, },
            {{48, 120, -46}, {121, 121, 131}, {122, 122, 29}, },
            {{105, 105, 132}, },
            {{114, 114, 133}, },
            {{48, 109, -17}, {110, 110, 134}, {111, 122, 29}, },
            {{110, 110, 135}, },
            {{48, 122, -12}, },
            {{100, 100, 136}, },
            {{97, 97, 137}, },
            {{48, 122, -12}, },
            {{116, 116, 138}, },
            {{101, 101, 139}, },
            {{99, 99, 140}, },
            {{114, 114, 141}, },
            {{114, 114, 142}, },
            {{116, 116, 143}, },
            {{97, 97, 144}, },
            {},
            {},
            {{99, 99, 145}, },
            {{116, 116, 146}, },
            {},
        }
        { // COMMENT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 39, 1}, {40, 40, 6}, {41, 41, 7}, {42, 42, 8}, {43, 47, 1}, {48, 57, 9}, {58, 64, 1}, {65, 90, 10}, {91, 96, 1}, {97, 97, 11}, {98, 98, 12}, {99, 99, 13}, {100, 100, 14}, {101, 101, 15}, {102, 102, 16}, {103, 107, 10}, {108, 108, 17}, {109, 109, 10}, {110, 110, 18}, {111, 111, 19}, {112, 112, 20}, {113, 113, 10}, {114, 114, 21}, {115, 115, 22}, {116, 116, 23}, {117, 117, 24}, {118, 122, 10}, {123, 65535, 1}, },
            {{0, 41, 25}, {42, 42, 26}, {43, 65535, 25}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{47, 47, 27}, },
            {{0, 42, -3}, {43, 45, 25}, {46, 46, 28}, {47, 47, 25}, {48, 57, 29}, {58, 65535, 25}, },
            {{0, 42, -3}, {43, 47, 25}, {48, 57, 30}, {58, 64, 25}, {65, 90, 31}, {91, 96, 25}, {97, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 97, 31}, {98, 98, 32}, {99, 107, 31}, {108, 108, 33}, {109, 109, 31}, {110, 110, 34}, {111, 120, 31}, {121, 121, 35}, {122, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 116, 31}, {117, 117, 36}, {118, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 110, 31}, {111, 111, 37}, {112, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 97, 38}, {98, 100, 31}, {101, 101, 39}, {102, 104, 31}, {105, 105, 40}, {106, 113, 31}, {114, 114, 41}, {115, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 109, 31}, {110, 110, 42}, {111, 122, 31}, {123, 65535, 25}, },
            {{0, 116, -14}, {117, 117, 43}, {118, 65535, -14}, },
            {{0, 96, -12}, {97, 100, 31}, {101, 101, 44}, {102, 110, 31}, {111, 111, 45}, {112, 65535, -15}, },
            {{0, 96, -12}, {97, 97, 46}, {98, 100, 31}, {101, 101, 47}, {102, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 108, 31}, {109, 109, 48}, {110, 122, 31}, {123, 65535, 25}, },
            {{0, 100, -19}, {101, 101, 49}, {102, 65535, -20}, },
            {{0, 110, -15}, {111, 111, 50}, {112, 65535, -15}, },
            {{0, 100, -19}, {101, 101, 51}, {102, 65535, -20}, },
            {{0, 110, -15}, {111, 111, 52}, {112, 65535, -15}, },
            {{0, 109, -17}, {110, 110, 53}, {111, 65535, -17}, },
            {{0, 65535, -3}, },
            {{47, 47, 27}, },
            {},
            {{0, 47, -12}, {48, 57, 54}, {58, 65535, 25}, },
            {{0, 65535, -11}, },
            {{0, 65535, -12}, },
            {{0, 65535, -12}, },
            {{0, 96, -12}, {97, 97, 55}, {98, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 111, 31}, {112, 112, 56}, {113, 122, 31}, {123, 65535, 25}, },
            {{0, 109, -17}, {110, 110, 57}, {111, 65535, -17}, },
            {{0, 100, -19}, {101, 101, 58}, {102, 65535, -20}, },
            {{0, 96, -12}, {97, 101, 31}, {102, 102, 59}, {103, 122, 31}, {123, 65535, 25}, },
            {{0, 109, -17}, {110, 110, 60}, {111, 65535, -17}, },
            {{0, 96, -12}, {97, 103, 31}, {104, 104, 61}, {105, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 98, 31}, {99, 99, 62}, {100, 122, 31}, {123, 65535, 25}, },
            {{0, 98, -41}, {99, 99, 63}, {100, 65535, -41}, },
            {{0, 110, -15}, {111, 111, 64}, {112, 65535, -15}, },
            {{0, 96, -12}, {97, 99, 31}, {100, 100, 65}, {101, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 114, 31}, {115, 115, 66}, {116, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 117, 31}, {118, 118, 67}, {119, 122, 31}, {123, 65535, 25}, },
            {{0, 110, -15}, {111, 111, 68}, {112, 113, 31}, {114, 114, 69}, {115, 65535, -16}, },
            {{0, 96, -12}, {97, 120, 31}, {121, 121, 70}, {122, 65535, -13}, },
            {{0, 96, -12}, {97, 113, 31}, {114, 114, 71}, {115, 65535, -16}, },
            {{0, 100, -19}, {101, 101, 72}, {102, 65535, -20}, },
            {{0, 100, -19}, {101, 101, 73}, {102, 65535, -20}, },
            {{0, 65535, -12}, },
            {{0, 113, -49}, {114, 114, 74}, {115, 65535, -16}, },
            {{0, 108, -21}, {109, 109, 75}, {110, 65535, -21}, },
            {{0, 99, -44}, {100, 100, 76}, {101, 65535, -44}, },
            {{0, 65535, -30}, },
            {{0, 98, -41}, {99, 99, 77}, {100, 65535, -41}, },
            {{0, 103, -40}, {104, 104, 78}, {105, 65535, -40}, },
            {{0, 110, -15}, {111, 111, 79}, {112, 65535, -15}, },
            {{0, 65535, -12}, },
            {{0, 101, -38}, {102, 102, 80}, {103, 65535, -38}, },
            {{0, 114, -45}, {115, 115, 81}, {116, 65535, -45}, },
            {{0, 65535, -12}, },
            {{0, 96, -12}, {97, 107, 31}, {108, 108, 82}, {109, 122, 31}, {123, 65535, 25}, },
            {{0, 103, -40}, {104, 104, 83}, {105, 65535, -40}, },
            {{0, 111, -35}, {112, 112, 84}, {113, 65535, -35}, },
            {{0, 90, -12}, {91, 94, 25}, {95, 95, 85}, {96, 96, 25}, {97, 65535, -12}, },
            {{0, 65535, -12}, },
            {{0, 100, -19}, {101, 101, 86}, {102, 65535, -20}, },
            {{0, 96, -12}, {97, 115, 31}, {116, 116, 87}, {117, 122, 31}, {123, 65535, 25}, },
            {{0, 99, -44}, {100, 100, 88}, {101, 65535, -44}, },
            {{0, 65535, -12}, },
            {{0, 101, -38}, {102, 102, 89}, {103, 65535, -38}, },
            {{0, 96, -12}, {97, 102, 31}, {103, 103, 90}, {104, 122, 31}, {123, 65535, 25}, },
            {{0, 113, -49}, {114, 114, 91}, {115, 65535, -16}, },
            {{0, 101, -38}, {102, 102, 92}, {103, 65535, -38}, },
            {{0, 100, -19}, {101, 101, 93}, {102, 65535, -20}, },
            {{0, 100, -19}, {101, 101, 94}, {102, 65535, -20}, },
            {{0, 116, -14}, {117, 117, 95}, {118, 65535, -14}, },
            {{0, 96, -12}, {97, 97, 96}, {98, 65535, -34}, },
            {{0, 116, -14}, {117, 117, 97}, {118, 65535, -14}, },
            {{0, 65535, -12}, },
            {{0, 96, -12}, {97, 104, 31}, {105, 105, 98}, {106, 122, 31}, {123, 65535, 25}, },
            {{0, 96, -12}, {97, 97, 99}, {98, 65535, -34}, },
            {{0, 110, -15}, {111, 111, 100}, {112, 65535, -15}, },
            {{0, 65535, -12}, },
            {{0, 42, -3}, {43, 98, 25}, {99, 99, 101}, {100, 65535, 25}, },
            {{0, 107, -64}, {108, 108, 102}, {109, 65535, -64}, },
            {{0, 65535, -12}, },
            {{0, 64, -12}, {65, 83, 31}, {84, 84, 103}, {85, 90, 31}, {91, 65535, -12}, },
            {{0, 65535, -12}, },
            {{0, 96, -12}, {97, 97, 104}, {98, 65535, -34}, },
            {{0, 65535, -12}, },
            {{0, 83, -90}, {84, 84, 105}, {85, 65535, -90}, },
            {{0, 65535, -12}, },
            {{0, 113, -49}, {114, 114, 106}, {115, 65535, -16}, },
            {{0, 114, -45}, {115, 115, 107}, {116, 65535, -45}, },
            {{0, 65535, -12}, },
            {{0, 109, -17}, {110, 110, 108}, {111, 65535, -17}, },
            {{0, 99, -44}, {100, 100, 109}, {101, 65535, -44}, },
            {{0, 113, -49}, {114, 114, 110}, {115, 65535, -16}, },
            {{0, 115, -70}, {116, 116, 111}, {117, 65535, -70}, },
            {{0, 42, -3}, {43, 110, 25}, {111, 111, 112}, {112, 65535, 25}, },
            {{0, 64, -12}, {65, 67, 31}, {68, 68, 113}, {69, 84, 31}, {85, 85, 114}, {86, 90, 31}, {91, 65535, -12}, },
            {{0, 110, -15}, {111, 111, 115}, {112, 65535, -15}, },
            {{0, 65535, -12}, },
            {{0, 110, -15}, {111, 111, 116}, {112, 65535, -15}, },
            {{0, 94, -67}, {95, 95, 117}, {96, 65535, -67}, },
            {{0, 65535, -12}, },
            {{0, 98, -41}, {99, 99, 118}, {100, 65535, -41}, },
            {{0, 100, -19}, {101, 101, 119}, {102, 65535, -20}, },
            {{0, 100, -19}, {101, 101, 120}, {102, 65535, -20}, },
            {{0, 110, -15}, {111, 111, 121}, {112, 65535, -15}, },
            {{0, 42, -3}, {43, 109, 25}, {110, 110, 122}, {111, 65535, 25}, },
            {{0, 110, -15}, {111, 111, 123}, {112, 65535, -15}, },
            {{0, 111, -35}, {112, 112, 124}, {113, 65535, -35}, },
            {{0, 65535, -12}, },
            {{0, 65535, -12}, },
            {{0, 98, -87}, {99, 99, 125}, {100, 65535, 25}, },
            {{0, 100, -19}, {101, 101, 126}, {102, 65535, -20}, },
            {{0, 113, -49}, {114, 114, 127}, {115, 65535, -16}, },
            {{0, 65535, -12}, },
            {{0, 108, -21}, {109, 109, 128}, {110, 65535, -21}, },
            {{0, 42, -3}, {43, 114, 25}, {115, 115, 129}, {116, 116, 130}, {117, 65535, 25}, },
            {{0, 96, -12}, {97, 118, 31}, {119, 119, 131}, {120, 122, 31}, {123, 65535, 25}, },
            {{0, 65535, -12}, },
            {{0, 110, -103}, {111, 111, 132}, {112, 65535, 25}, },
            {{0, 65535, -12}, },
            {{0, 65535, -12}, },
            {{0, 120, -48}, {121, 121, 133}, {122, 65535, -13}, },
            {{0, 42, -3}, {43, 104, 25}, {105, 105, 134}, {106, 65535, 25}, },
            {{0, 42, -3}, {43, 113, 25}, {114, 114, 135}, {115, 65535, 25}, },
            {{0, 109, -17}, {110, 110, 136}, {111, 65535, -17}, },
            {{0, 109, -114}, {110, 110, 137}, {111, 65535, 25}, },
            {{0, 65535, -12}, },
            {{0, 42, -3}, {43, 99, 25}, {100, 100, 138}, {101, 65535, 25}, },
            {{0, 42, -3}, {43, 96, 25}, {97, 97, 139}, {98, 65535, 25}, },
            {{0, 65535, -12}, },
            {{0, 42, -3}, {43, 115, 25}, {116, 116, 140}, {117, 65535, 25}, },
            {{0, 42, -3}, {43, 100, 25}, {101, 101, 141}, {102, 65535, 25}, },
            {{0, 98, -87}, {99, 99, 142}, {100, 65535, 25}, },
            {{0, 113, -132}, {114, 114, 143}, {115, 65535, 25}, },
            {{0, 113, -132}, {114, 114, 144}, {115, 65535, 25}, },
            {{0, 115, -139}, {116, 116, 145}, {117, 65535, 25}, },
            {{0, 96, -137}, {97, 97, 146}, {98, 65535, 25}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 98, -87}, {99, 99, 147}, {100, 65535, 25}, },
            {{0, 115, -139}, {116, 116, 148}, {117, 65535, 25}, },
            {{0, 65535, -3}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // DEF
        {-1, 34, 33, 33, 33, 33, 24, 25, 34, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 0, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 12, 31, 31, 31, 32, 31, 31, 31, 26, 31, 31, 13, 31, 31, 31, 31, 11, 31, 31, 31, 27, 31, 31, 31, 31, 31, 31, 31, 31, 31, 20, 31, 31, 31, 19, -1, 31, 18, 31, 21, 31, 30, 31, 7, 31, 31, 4, 31, 31, 31, 31, -1, 31, 31, 5, 31, 31, 6, 31, 31, 31, 31, -1, 31, 31, 23, 22, -1, 31, 31, 9, 31, -1, 31, 28, -1, 10, 14, 31, -1, -1, 31, -1, 8, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 15, 17, -1, -1, 16, },
        // COMMENT
        {1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, },

    };*/

    public static class State
    {
        public final static State DEF = new State(0);
        public final static State COMMENT = new State(1);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
