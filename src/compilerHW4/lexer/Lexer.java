/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexing.lexer;

import java.io.*;
import lexing.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.DEF;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.COMMENT; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMENT; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMMENT; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.DEF; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBeginComment(line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInComment(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStar(line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndComment(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBegin(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOmega(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInt(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolean(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDeclare(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPrint(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAnd(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOr(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNot(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIf(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFi(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhile(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWend(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPlus(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMinus(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMultiply(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDivide(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLessthan(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGreaterthan(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIncrement(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDecrement(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAssign(line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSpace(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // DEF
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 46, 1}, {47, 47, 6}, {48, 57, 7}, {58, 64, 1}, {65, 90, 8}, {91, 96, 1}, {97, 97, 9}, {98, 98, 10}, {99, 99, 11}, {100, 100, 12}, {101, 101, 13}, {102, 102, 14}, {103, 107, 8}, {108, 108, 15}, {109, 109, 8}, {110, 110, 16}, {111, 111, 17}, {112, 112, 18}, {113, 113, 8}, {114, 114, 19}, {115, 115, 20}, {116, 116, 21}, {117, 117, 22}, {118, 122, 8}, {123, 65535, 1}, },
            {},
            {},
            {},
            {},
            {},
            {{42, 42, 23}, },
            {{46, 46, 24}, {48, 57, 25}, },
            {{48, 57, 26}, {65, 90, 27}, {97, 122, 27}, },
            {{48, 90, -10}, {97, 97, 27}, {98, 98, 28}, {99, 107, 27}, {108, 108, 29}, {109, 109, 27}, {110, 110, 30}, {111, 122, 27}, },
            {{48, 90, -10}, {97, 116, 27}, {117, 117, 31}, {118, 122, 27}, },
            {{48, 90, -10}, {97, 110, 27}, {111, 111, 32}, {112, 122, 27}, },
            {{48, 90, -10}, {97, 97, 33}, {98, 100, 27}, {101, 101, 34}, {102, 104, 27}, {105, 105, 35}, {106, 113, 27}, {114, 114, 36}, {115, 122, 27}, },
            {{48, 90, -10}, {97, 109, 27}, {110, 110, 37}, {111, 122, 27}, },
            {{48, 116, -12}, {117, 117, 38}, {118, 122, 27}, },
            {{48, 90, -10}, {97, 100, 27}, {101, 101, 39}, {102, 110, 27}, {111, 111, 40}, {112, 122, 27}, },
            {{48, 100, -17}, {101, 101, 41}, {102, 122, 27}, },
            {{48, 90, -10}, {97, 108, 27}, {109, 109, 42}, {110, 122, 27}, },
            {{48, 100, -17}, {101, 101, 43}, {102, 122, 27}, },
            {{48, 110, -13}, {111, 111, 44}, {112, 122, 27}, },
            {{48, 100, -17}, {101, 101, 45}, {102, 122, 27}, },
            {{48, 110, -13}, {111, 111, 46}, {112, 122, 27}, },
            {{48, 109, -15}, {110, 110, 47}, {111, 122, 27}, },
            {},
            {{48, 57, 48}, },
            {{46, 57, -9}, },
            {{48, 122, -10}, },
            {{48, 122, -10}, },
            {{48, 90, -10}, {97, 97, 49}, {98, 122, 27}, },
            {{48, 90, -10}, {97, 111, 27}, {112, 112, 50}, {113, 122, 27}, },
            {{48, 109, -15}, {110, 110, 51}, {111, 122, 27}, },
            {{48, 90, -10}, {97, 101, 27}, {102, 102, 52}, {103, 122, 27}, },
            {{48, 109, -15}, {110, 110, 53}, {111, 122, 27}, },
            {{48, 90, -10}, {97, 103, 27}, {104, 104, 54}, {105, 122, 27}, },
            {{48, 90, -10}, {97, 98, 27}, {99, 99, 55}, {100, 122, 27}, },
            {{48, 98, -36}, {99, 99, 56}, {100, 122, 27}, },
            {{48, 110, -13}, {111, 111, 57}, {112, 122, 27}, },
            {{48, 90, -10}, {97, 99, 27}, {100, 100, 58}, {101, 122, 27}, },
            {{48, 90, -10}, {97, 114, 27}, {115, 115, 59}, {116, 122, 27}, },
            {{48, 90, -10}, {97, 117, 27}, {118, 118, 60}, {119, 122, 27}, },
            {{48, 110, -13}, {111, 111, 61}, {112, 113, 27}, {114, 114, 62}, {115, 122, 27}, },
            {{48, 90, -10}, {97, 113, 27}, {114, 114, 63}, {115, 122, 27}, },
            {{48, 100, -17}, {101, 101, 64}, {102, 122, 27}, },
            {{48, 100, -17}, {101, 101, 65}, {102, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 113, -43}, {114, 114, 66}, {115, 122, 27}, },
            {{48, 108, -19}, {109, 109, 67}, {110, 122, 27}, },
            {{48, 99, -39}, {100, 100, 68}, {101, 122, 27}, },
            {{48, 57, 48}, },
            {{48, 98, -36}, {99, 99, 69}, {100, 122, 27}, },
            {{48, 103, -35}, {104, 104, 70}, {105, 122, 27}, },
            {{48, 110, -13}, {111, 111, 71}, {112, 122, 27}, },
            {{48, 101, -33}, {102, 102, 72}, {103, 122, 27}, },
            {{48, 114, -40}, {115, 115, 73}, {116, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 90, -10}, {97, 107, 27}, {108, 108, 74}, {109, 122, 27}, },
            {{48, 103, -35}, {104, 104, 75}, {105, 122, 27}, },
            {{48, 111, -31}, {112, 112, 76}, {113, 122, 27}, },
            {{48, 90, -10}, {95, 95, 77}, {97, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 100, -17}, {101, 101, 78}, {102, 122, 27}, },
            {{48, 90, -10}, {97, 115, 27}, {116, 116, 79}, {117, 122, 27}, },
            {{48, 99, -39}, {100, 100, 80}, {101, 122, 27}, },
            {{48, 101, -33}, {102, 102, 81}, {103, 122, 27}, },
            {{48, 90, -10}, {97, 102, 27}, {103, 103, 82}, {104, 122, 27}, },
            {{48, 113, -43}, {114, 114, 83}, {115, 122, 27}, },
            {{48, 101, -33}, {102, 102, 84}, {103, 122, 27}, },
            {{48, 100, -17}, {101, 101, 85}, {102, 122, 27}, },
            {{48, 100, -17}, {101, 101, 86}, {102, 122, 27}, },
            {{48, 116, -12}, {117, 117, 87}, {118, 122, 27}, },
            {{48, 90, -10}, {97, 97, 88}, {98, 122, 27}, },
            {{48, 116, -12}, {117, 117, 89}, {118, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 90, -10}, {97, 104, 27}, {105, 105, 90}, {106, 122, 27}, },
            {{48, 90, -10}, {97, 97, 91}, {98, 122, 27}, },
            {{48, 110, -13}, {111, 111, 92}, {112, 122, 27}, },
            {{48, 122, -10}, },
            {{99, 99, 93}, },
            {{48, 107, -57}, {108, 108, 94}, {109, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 57, 26}, {65, 83, 27}, {84, 84, 95}, {85, 90, 27}, {97, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 90, -10}, {97, 97, 96}, {98, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 83, -82}, {84, 84, 97}, {85, 122, -82}, },
            {{48, 122, -10}, },
            {{48, 113, -43}, {114, 114, 98}, {115, 122, 27}, },
            {{48, 114, -40}, {115, 115, 99}, {116, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 109, -15}, {110, 110, 100}, {111, 122, 27}, },
            {{48, 99, -39}, {100, 100, 101}, {101, 122, 27}, },
            {{48, 113, -43}, {114, 114, 102}, {115, 122, 27}, },
            {{48, 115, -63}, {116, 116, 103}, {117, 122, 27}, },
            {{111, 111, 104}, },
            {{48, 57, 26}, {65, 67, 27}, {68, 68, 105}, {69, 84, 27}, {85, 85, 106}, {86, 90, 27}, {97, 122, 27}, },
            {{48, 110, -13}, {111, 111, 107}, {112, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 110, -13}, {111, 111, 108}, {112, 122, 27}, },
            {{48, 90, -10}, {95, 95, 109}, {97, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 98, -36}, {99, 99, 110}, {100, 122, 27}, },
            {{48, 100, -17}, {101, 101, 111}, {102, 122, 27}, },
            {{48, 100, -17}, {101, 101, 112}, {102, 122, 27}, },
            {{48, 110, -13}, {111, 111, 113}, {112, 122, 27}, },
            {{110, 110, 114}, },
            {{48, 110, -13}, {111, 111, 115}, {112, 122, 27}, },
            {{48, 111, -31}, {112, 112, 116}, {113, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 122, -10}, },
            {{99, 99, 117}, },
            {{48, 100, -17}, {101, 101, 118}, {102, 122, 27}, },
            {{48, 113, -43}, {114, 114, 119}, {115, 122, 27}, },
            {{48, 122, -10}, },
            {{48, 108, -19}, {109, 109, 120}, {110, 122, 27}, },
            {{115, 115, 121}, {116, 116, 122}, },
            {{48, 90, -10}, {97, 118, 27}, {119, 119, 123}, {120, 122, 27}, },
            {{48, 122, -10}, },
            {{111, 111, 124}, },
            {{48, 122, -10}, },
            {{48, 122, -10}, },
            {{48, 90, -10}, {97, 120, 27}, {121, 121, 125}, {122, 122, 27}, },
            {{105, 105, 126}, },
            {{114, 114, 127}, },
            {{48, 109, -15}, {110, 110, 128}, {111, 122, 27}, },
            {{110, 110, 129}, },
            {{48, 122, -10}, },
            {{100, 100, 130}, },
            {{97, 97, 131}, },
            {{48, 122, -10}, },
            {{116, 116, 132}, },
            {{101, 101, 133}, },
            {{99, 99, 134}, },
            {{114, 114, 135}, },
            {{114, 114, 136}, },
            {{116, 116, 137}, },
            {{97, 97, 138}, },
            {},
            {},
            {{99, 99, 139}, },
            {{116, 116, 140}, },
            {},
        }
        { // COMMENT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 41, 1}, {42, 42, 6}, {43, 47, 1}, {48, 57, 7}, {58, 64, 1}, {65, 90, 8}, {91, 96, 1}, {97, 97, 9}, {98, 98, 10}, {99, 99, 11}, {100, 100, 12}, {101, 101, 13}, {102, 102, 14}, {103, 107, 8}, {108, 108, 15}, {109, 109, 8}, {110, 110, 16}, {111, 111, 17}, {112, 112, 18}, {113, 113, 8}, {114, 114, 19}, {115, 115, 20}, {116, 116, 21}, {117, 117, 22}, {118, 122, 8}, {123, 65535, 1}, },
            {{0, 41, 23}, {42, 42, 24}, {43, 65535, 23}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{47, 47, 25}, },
            {{0, 42, -3}, {43, 45, 23}, {46, 46, 26}, {47, 47, 23}, {48, 57, 27}, {58, 65535, 23}, },
            {{0, 42, -3}, {43, 47, 23}, {48, 57, 28}, {58, 64, 23}, {65, 90, 29}, {91, 96, 23}, {97, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 97, 29}, {98, 98, 30}, {99, 107, 29}, {108, 108, 31}, {109, 109, 29}, {110, 110, 32}, {111, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 116, 29}, {117, 117, 33}, {118, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 110, 29}, {111, 111, 34}, {112, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 97, 35}, {98, 100, 29}, {101, 101, 36}, {102, 104, 29}, {105, 105, 37}, {106, 113, 29}, {114, 114, 38}, {115, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 109, 29}, {110, 110, 39}, {111, 65535, -11}, },
            {{0, 116, -12}, {117, 117, 40}, {118, 65535, -12}, },
            {{0, 96, -10}, {97, 100, 29}, {101, 101, 41}, {102, 110, 29}, {111, 111, 42}, {112, 65535, -13}, },
            {{0, 100, -17}, {101, 101, 43}, {102, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 108, 29}, {109, 109, 44}, {110, 122, 29}, {123, 65535, 23}, },
            {{0, 100, -17}, {101, 101, 45}, {102, 65535, -18}, },
            {{0, 110, -13}, {111, 111, 46}, {112, 65535, -13}, },
            {{0, 100, -17}, {101, 101, 47}, {102, 65535, -18}, },
            {{0, 110, -13}, {111, 111, 48}, {112, 65535, -13}, },
            {{0, 109, -15}, {110, 110, 49}, {111, 65535, -11}, },
            {{0, 65535, -3}, },
            {{47, 47, 25}, },
            {},
            {{0, 47, -10}, {48, 57, 50}, {58, 65535, 23}, },
            {{0, 65535, -9}, },
            {{0, 65535, -10}, },
            {{0, 65535, -10}, },
            {{0, 96, -10}, {97, 97, 51}, {98, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 111, 29}, {112, 112, 52}, {113, 122, 29}, {123, 65535, 23}, },
            {{0, 109, -15}, {110, 110, 53}, {111, 65535, -11}, },
            {{0, 96, -10}, {97, 101, 29}, {102, 102, 54}, {103, 122, 29}, {123, 65535, 23}, },
            {{0, 109, -15}, {110, 110, 55}, {111, 65535, -11}, },
            {{0, 96, -10}, {97, 103, 29}, {104, 104, 56}, {105, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 98, 29}, {99, 99, 57}, {100, 122, 29}, {123, 65535, 23}, },
            {{0, 98, -38}, {99, 99, 58}, {100, 65535, -38}, },
            {{0, 110, -13}, {111, 111, 59}, {112, 65535, -13}, },
            {{0, 96, -10}, {97, 99, 29}, {100, 100, 60}, {101, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 114, 29}, {115, 115, 61}, {116, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 117, 29}, {118, 118, 62}, {119, 122, 29}, {123, 65535, 23}, },
            {{0, 110, -13}, {111, 111, 63}, {112, 113, 29}, {114, 114, 64}, {115, 65535, -14}, },
            {{0, 96, -10}, {97, 113, 29}, {114, 114, 65}, {115, 65535, -14}, },
            {{0, 100, -17}, {101, 101, 66}, {102, 65535, -18}, },
            {{0, 100, -17}, {101, 101, 67}, {102, 65535, -18}, },
            {{0, 65535, -10}, },
            {{0, 113, -45}, {114, 114, 68}, {115, 65535, -14}, },
            {{0, 108, -19}, {109, 109, 69}, {110, 65535, -19}, },
            {{0, 99, -41}, {100, 100, 70}, {101, 65535, -41}, },
            {{0, 65535, -28}, },
            {{0, 98, -38}, {99, 99, 71}, {100, 65535, -38}, },
            {{0, 103, -37}, {104, 104, 72}, {105, 65535, -37}, },
            {{0, 110, -13}, {111, 111, 73}, {112, 65535, -13}, },
            {{0, 101, -35}, {102, 102, 74}, {103, 65535, -35}, },
            {{0, 114, -42}, {115, 115, 75}, {116, 65535, -42}, },
            {{0, 65535, -10}, },
            {{0, 96, -10}, {97, 107, 29}, {108, 108, 76}, {109, 122, 29}, {123, 65535, 23}, },
            {{0, 103, -37}, {104, 104, 77}, {105, 65535, -37}, },
            {{0, 111, -33}, {112, 112, 78}, {113, 65535, -33}, },
            {{0, 90, -10}, {91, 94, 23}, {95, 95, 79}, {96, 96, 23}, {97, 65535, -10}, },
            {{0, 65535, -10}, },
            {{0, 100, -17}, {101, 101, 80}, {102, 65535, -18}, },
            {{0, 96, -10}, {97, 115, 29}, {116, 116, 81}, {117, 122, 29}, {123, 65535, 23}, },
            {{0, 99, -41}, {100, 100, 82}, {101, 65535, -41}, },
            {{0, 101, -35}, {102, 102, 83}, {103, 65535, -35}, },
            {{0, 96, -10}, {97, 102, 29}, {103, 103, 84}, {104, 122, 29}, {123, 65535, 23}, },
            {{0, 113, -45}, {114, 114, 85}, {115, 65535, -14}, },
            {{0, 101, -35}, {102, 102, 86}, {103, 65535, -35}, },
            {{0, 100, -17}, {101, 101, 87}, {102, 65535, -18}, },
            {{0, 100, -17}, {101, 101, 88}, {102, 65535, -18}, },
            {{0, 116, -12}, {117, 117, 89}, {118, 65535, -12}, },
            {{0, 96, -10}, {97, 97, 90}, {98, 65535, -32}, },
            {{0, 116, -12}, {117, 117, 91}, {118, 65535, -12}, },
            {{0, 65535, -10}, },
            {{0, 96, -10}, {97, 104, 29}, {105, 105, 92}, {106, 122, 29}, {123, 65535, 23}, },
            {{0, 96, -10}, {97, 97, 93}, {98, 65535, -32}, },
            {{0, 110, -13}, {111, 111, 94}, {112, 65535, -13}, },
            {{0, 65535, -10}, },
            {{0, 42, -3}, {43, 98, 23}, {99, 99, 95}, {100, 65535, 23}, },
            {{0, 107, -59}, {108, 108, 96}, {109, 65535, -59}, },
            {{0, 65535, -10}, },
            {{0, 64, -10}, {65, 83, 29}, {84, 84, 97}, {85, 90, 29}, {91, 65535, -10}, },
            {{0, 65535, -10}, },
            {{0, 96, -10}, {97, 97, 98}, {98, 65535, -32}, },
            {{0, 65535, -10}, },
            {{0, 83, -84}, {84, 84, 99}, {85, 65535, -84}, },
            {{0, 65535, -10}, },
            {{0, 113, -45}, {114, 114, 100}, {115, 65535, -14}, },
            {{0, 114, -42}, {115, 115, 101}, {116, 65535, -42}, },
            {{0, 65535, -10}, },
            {{0, 109, -15}, {110, 110, 102}, {111, 65535, -11}, },
            {{0, 99, -41}, {100, 100, 103}, {101, 65535, -41}, },
            {{0, 113, -45}, {114, 114, 104}, {115, 65535, -14}, },
            {{0, 115, -65}, {116, 116, 105}, {117, 65535, -65}, },
            {{0, 42, -3}, {43, 110, 23}, {111, 111, 106}, {112, 65535, 23}, },
            {{0, 64, -10}, {65, 67, 29}, {68, 68, 107}, {69, 84, 29}, {85, 85, 108}, {86, 90, 29}, {91, 65535, -10}, },
            {{0, 110, -13}, {111, 111, 109}, {112, 65535, -13}, },
            {{0, 65535, -10}, },
            {{0, 110, -13}, {111, 111, 110}, {112, 65535, -13}, },
            {{0, 94, -62}, {95, 95, 111}, {96, 65535, -62}, },
            {{0, 65535, -10}, },
            {{0, 98, -38}, {99, 99, 112}, {100, 65535, -38}, },
            {{0, 100, -17}, {101, 101, 113}, {102, 65535, -18}, },
            {{0, 100, -17}, {101, 101, 114}, {102, 65535, -18}, },
            {{0, 110, -13}, {111, 111, 115}, {112, 65535, -13}, },
            {{0, 42, -3}, {43, 109, 23}, {110, 110, 116}, {111, 65535, 23}, },
            {{0, 110, -13}, {111, 111, 117}, {112, 65535, -13}, },
            {{0, 111, -33}, {112, 112, 118}, {113, 65535, -33}, },
            {{0, 65535, -10}, },
            {{0, 65535, -10}, },
            {{0, 98, -81}, {99, 99, 119}, {100, 65535, 23}, },
            {{0, 100, -17}, {101, 101, 120}, {102, 65535, -18}, },
            {{0, 113, -45}, {114, 114, 121}, {115, 65535, -14}, },
            {{0, 65535, -10}, },
            {{0, 108, -19}, {109, 109, 122}, {110, 65535, -19}, },
            {{0, 42, -3}, {43, 114, 23}, {115, 115, 123}, {116, 116, 124}, {117, 65535, 23}, },
            {{0, 96, -10}, {97, 118, 29}, {119, 119, 125}, {120, 122, 29}, {123, 65535, 23}, },
            {{0, 65535, -10}, },
            {{0, 110, -97}, {111, 111, 126}, {112, 65535, 23}, },
            {{0, 65535, -10}, },
            {{0, 65535, -10}, },
            {{0, 96, -10}, {97, 120, 29}, {121, 121, 127}, {122, 122, 29}, {123, 65535, 23}, },
            {{0, 42, -3}, {43, 104, 23}, {105, 105, 128}, {106, 65535, 23}, },
            {{0, 42, -3}, {43, 113, 23}, {114, 114, 129}, {115, 65535, 23}, },
            {{0, 109, -15}, {110, 110, 130}, {111, 65535, -11}, },
            {{0, 109, -108}, {110, 110, 131}, {111, 65535, 23}, },
            {{0, 65535, -10}, },
            {{0, 42, -3}, {43, 99, 23}, {100, 100, 132}, {101, 65535, 23}, },
            {{0, 42, -3}, {43, 96, 23}, {97, 97, 133}, {98, 65535, 23}, },
            {{0, 65535, -10}, },
            {{0, 42, -3}, {43, 115, 23}, {116, 116, 134}, {117, 65535, 23}, },
            {{0, 42, -3}, {43, 100, 23}, {101, 101, 135}, {102, 65535, 23}, },
            {{0, 98, -81}, {99, 99, 136}, {100, 65535, 23}, },
            {{0, 113, -126}, {114, 114, 137}, {115, 65535, 23}, },
            {{0, 113, -126}, {114, 114, 138}, {115, 65535, 23}, },
            {{0, 115, -133}, {116, 116, 139}, {117, 65535, 23}, },
            {{0, 96, -131}, {97, 97, 140}, {98, 65535, 23}, },
            {{0, 65535, -3}, },
            {{0, 65535, -3}, },
            {{0, 98, -81}, {99, 99, 141}, {100, 65535, 23}, },
            {{0, 115, -133}, {116, 116, 142}, {117, 65535, 23}, },
            {{0, 65535, -3}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // DEF
        {-1, 30, 29, 29, 29, 29, 30, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 0, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12, 27, 27, 27, 28, 27, 27, 27, 27, 27, 13, 27, 27, 27, 27, 11, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 20, 27, 27, 27, 19, -1, 27, 18, 27, 21, 27, 26, 27, 7, 27, 27, 4, 27, 27, 27, 27, -1, 27, 27, 5, 27, 27, 6, 27, 27, 27, 27, -1, 27, 27, 23, 22, -1, 27, 27, 9, 27, -1, 27, 24, -1, 10, 14, 27, -1, -1, 27, -1, 8, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, 15, 17, -1, -1, 16, },
        // COMMENT
        {1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, },

    };*/

    public static class State
    {
        public final static State DEF = new State(0);
        public final static State COMMENT = new State(1);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
